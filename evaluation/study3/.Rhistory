prompter.raw <- read.csv("~/Desktop/gssi/empirical SE/prompter-raw.csv")
View(prompter.raw)
median(prompter.raw)
median(prompter.raw[ProgrammingExperienceYears])
x <- select( prompter.raw, c(ProgrammingExperienceYears) )
x <- subset( prompter.raw, select=c(ProgrammingExperienceYears) )
x
median(x)
x <- subset(x,select=-c(SubjectID))
x <- subset(x,select=-c(SubjectID))
median(x)
x
View(x)
x <- subset(x,select=c(SubjectID))
median(subset(prompter.raw, select=(ProgrammingExperienceYears)))
subset(prompter.raw, select=(ProgrammingExperienceYears))
conc <- 0 10 20 30 40 50
conc
conc <- c(0,10,20,30,40,50)
conc <- c(0,10,20,30,40,50)
signal <- c(4,22,44,60,80)
lm(signal~conc)
conc <- c(0,10,20,30,40)
signal <- c(4,22,44,60,80)
lm(signal~conc)
conc <- c(0,10,20,30,40)
signal <- c(4,22,44,60,80)
lm.r=lm(signal~conc)
summary(lm.r)
coef(lm.r)
resid(lm.r)
fit(lm.r)
fitted(lm.r)
plot(lm.r)
layout(matrix(1:4,2,2))
fitted(lm.r)
layout(matrix(1:4,2,2))
fitted(lm.r)
layout(matrix(1:4,2,2))
plot(lm.r)
conc <- c(1896:2008,4)
conc <- c(1896:2008,4)
conc <- seq(1896,2008,4)
plot(year,time)
year <- seq(1896,2008,4)
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
plot(year,time)
year <- seq(1896,2008,4)
year <- year[-c(1)]
year <- seq(1896,2008,4)
year <- year[-c(6)]
year <- c(seq(1896,1904,4),1906, seq(1908,1936,4), seq(1948,2008,4))
year
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
plot(year,time)
year
time
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
plot(year,time)
lm.r=lm(signal~conc)
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
lm.r=lm(time~year)
summary(lm.r)
plot(lm.r)
fitted(lm.r)
resid(lm.r)
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
lm.r=lm(time~year)
summary(lm.r)
plot(year,time)
abline(lm.r)
resid(lm.r)
futureyears <- c(2020,2024,2048)
predict(lm.result,data.frame(year = futureyears), level = 0.9, interval = "confidence")
futureyears <- c(2020,2024,2048)
predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(futureyears,time)
fut <- predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(fut)
View(fut)
plot(futureyears,fut[fit])
plot(futureyears,fut["fit"])
View(fut)
futureyears <- c(2020,2024,2048)
fut <- predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(futureyears,fut["fit"])
fut["fit"]
View(fut)
fut[1]
View(fut)
fut[,"fit"]
plot(futureyears,fut[,"fit"])
futureyears <- c(2020,2024,2048,2052,2056,2148,2248,2248)
fut <- predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(futureyears,fut[,"fit"])
year <- c(seq(1928,1936,4),1948, seq(1952,2008,4))
time <- c(12.2,11.9,11.5,11.9,11.5,11.5,11,11.4,11,11.07,11.08,11.06,10.97,10.54,10.82,10.94,11.12,10.93,10.78)
version
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/TSE_2018/evaluation/developers")
source("load.r")
library(ggplot2)
require(reshape2)
library(dplyr)
library(RColorBrewer)
##################################  AVERAGES  ############################################
mean(questions$experience)
sd(questions$experience)
getmode(questions$appsDeveloped)
getmode(questions$membersCount)
getmode(questions$Time)
################################## BOXPLOTS Q1 Q2 Q3  ############################################
df <- data.frame(as.numeric(questions$Q1), as.numeric(questions$Q2), as.numeric(questions$Q3))
colnames(df) <- c("Q1", "Q2", "Q3")
boxplot(df,  yaxt='n', col="grey", drawRect=TRUE, wex=0.5, range=1, ylim=c(1,5), xaxt="n")
abline(v=c(1.5, 2.5))
par(las=1, pin=c(5,3.5), mar=c(2,5.6,0.5,2))
axis(side=2, labels=c("Absolutely\n no","No", "Don't know","Yes","Absolutely\n yes"), at=seq(1,5))
axis(side=1, labels=c(expression('q'[1]), expression('q'[2]), expression('q'[3])), at=seq(1,3))
################################## BOXPLOTS STATEMENTS  ############################################
df <- data.frame(as.numeric(questions$S1), as.numeric(questions$S2), as.numeric(questions$S3), as.numeric(questions$S4), as.numeric(questions$S5), as.numeric(questions$S6), as.numeric(questions$S7), as.numeric(questions$S8), as.numeric(questions$S9), as.numeric(questions$S10))
colnames(df) <- c("S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10")
boxplot(df,  yaxt='n', col="grey", drawRect=TRUE, wex=0.5, range=1, ylim=c(1,5), xaxt="n")
abline(v=c(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5))
par(las=1, pin=c(5,3.5), mar=c(2,5.6,0.5,2))
axis(side=2, labels=c(0,1,2,3,4), at=seq(1,5))
axis(side=1, labels=c(expression('s'[1]), expression('s'[2]), expression('s'[3]), expression('s'[4]), expression('s'[5]), expression('s'[6]), expression('s'[7]), expression('s'[8]), expression('s'[9]), expression('s'[10])), at=seq(1,10))
################################## COMPLETE NORMALIZED STATEMENTS HEATMAP  ############################################
norm_statements = rbind(S1n_freq, S2n_freq, S3n_freq, S4n_freq, S5n_freq, S6n_freq, S7n_freq, S8n_freq, S9n_freq,
S10n_freq)
norm_statements <- melt(norm_statements )
colnames(norm_statements) = c('Score', 'rowID', 'Percentage')
hm.palette <- colorRampPalette(brewer.pal(9, 'Oranges'), space='Lab')
ggplot(norm_statements, aes(x = Score, y = rowID, fill = Percentage)) +
geom_tile() +
#coord_equal() +
scale_fill_gradientn(colours = hm.palette(100)) +
scale_y_continuous() +
scale_x_discrete(labels = c(expression('s'[1]),expression('s'[2]),expression('s'[3]),expression('s'[4]),
expression('s'[5]),expression('s'[6]),expression('s'[7]),expression('s'[8]),
expression('s'[9]),expression('s'[10]))) +
xlab("Statement") +
ylab("Score") +
theme(axis.text=element_text(size=14), axis.title=element_text(size=14)) +
theme(axis.text.y = element_text(colour = c('red1', 'red4', 'black', 'green4', 'green2'))) +
theme(legend.position="bottom")
getmode(questions$Time)
mean(times)
sd(times)
SUS_score
