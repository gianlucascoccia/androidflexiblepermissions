prompter.raw <- read.csv("~/Desktop/gssi/empirical SE/prompter-raw.csv")
View(prompter.raw)
median(prompter.raw)
median(prompter.raw[ProgrammingExperienceYears])
x <- select( prompter.raw, c(ProgrammingExperienceYears) )
x <- subset( prompter.raw, select=c(ProgrammingExperienceYears) )
x
median(x)
x <- subset(x,select=-c(SubjectID))
x <- subset(x,select=-c(SubjectID))
median(x)
x
View(x)
x <- subset(x,select=c(SubjectID))
median(subset(prompter.raw, select=(ProgrammingExperienceYears)))
subset(prompter.raw, select=(ProgrammingExperienceYears))
conc <- 0 10 20 30 40 50
conc
conc <- c(0,10,20,30,40,50)
conc <- c(0,10,20,30,40,50)
signal <- c(4,22,44,60,80)
lm(signal~conc)
conc <- c(0,10,20,30,40)
signal <- c(4,22,44,60,80)
lm(signal~conc)
conc <- c(0,10,20,30,40)
signal <- c(4,22,44,60,80)
lm.r=lm(signal~conc)
summary(lm.r)
coef(lm.r)
resid(lm.r)
fit(lm.r)
fitted(lm.r)
plot(lm.r)
layout(matrix(1:4,2,2))
fitted(lm.r)
layout(matrix(1:4,2,2))
fitted(lm.r)
layout(matrix(1:4,2,2))
plot(lm.r)
conc <- c(1896:2008,4)
conc <- c(1896:2008,4)
conc <- seq(1896,2008,4)
plot(year,time)
year <- seq(1896,2008,4)
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
plot(year,time)
year <- seq(1896,2008,4)
year <- year[-c(1)]
year <- seq(1896,2008,4)
year <- year[-c(6)]
year <- c(seq(1896,1904,4),1906, seq(1908,1936,4), seq(1948,2008,4))
year
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
plot(year,time)
year
time
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
plot(year,time)
lm.r=lm(signal~conc)
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
lm.r=lm(time~year)
summary(lm.r)
plot(lm.r)
fitted(lm.r)
resid(lm.r)
year <- c(seq(1896,1904,4),1906, seq(1908,1912,4), seq(1920,1936,4), seq(1948,2008,4))
time <- c(12,11,11,11.2,10.8,10.8,10.8,10.6,10.8,10.3,10.3,10.3,10.4,10.5,10.2,10,9.95,10.14,10.06,10.25,9.99,9.92,9.96,9.84,9.87,9.85,9.69)
lm.r=lm(time~year)
summary(lm.r)
plot(year,time)
abline(lm.r)
resid(lm.r)
futureyears <- c(2020,2024,2048)
predict(lm.result,data.frame(year = futureyears), level = 0.9, interval = "confidence")
futureyears <- c(2020,2024,2048)
predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(futureyears,time)
fut <- predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(fut)
View(fut)
plot(futureyears,fut[fit])
plot(futureyears,fut["fit"])
View(fut)
futureyears <- c(2020,2024,2048)
fut <- predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(futureyears,fut["fit"])
fut["fit"]
View(fut)
fut[1]
View(fut)
fut[,"fit"]
plot(futureyears,fut[,"fit"])
futureyears <- c(2020,2024,2048,2052,2056,2148,2248,2248)
fut <- predict(lm.r,data.frame(year = futureyears), level = 0.9, interval = "confidence")
plot(futureyears,fut[,"fit"])
year <- c(seq(1928,1936,4),1948, seq(1952,2008,4))
time <- c(12.2,11.9,11.5,11.9,11.5,11.5,11,11.4,11,11.07,11.08,11.06,10.97,10.54,10.82,10.94,11.12,10.93,10.78)
version
setwd("/Users/gianlucascoccia/Desktop/svn/gianluca/TSE_2018/evaluation/users")
source('load.r')
library(ggplot2)
require(reshape2)
library(dplyr)
library(RColorBrewer)
x_name <- "Android6"
y_name <- "AFP"
################################################ BOXPLOT OF Q1 ################################################
df <- data.frame(A6$ID, as.numeric(A6$Q1), as.numeric(AFP$Q1))
colnames(df) <- c("ID", "Android 6", "AFP")
df = melt(df, id.vars = c("ID"))
ggplot(df, aes(variable, value)) +
geom_boxplot() +
scale_y_continuous( labels = c("Absolutely  \nnot trustable","Not trustable ","Neutral ","Trustable ","Very    \ntrustable")) +
scale_x_discrete() +
ylab(label="Answer") +
xlab(label = "Permission system") +
theme_bw() +
theme(text = element_text(size=15))
################################################ BOXPLOT OF Q2 ################################################
df <- data.frame(A6$ID, as.numeric(A6$Q2), as.numeric(AFP$Q2))
colnames(df) <- c("ID", "Android 6", "AFP")
df = melt(df, id.vars = c("ID"))
ggplot(df, aes(variable, value)) +
geom_boxplot() +
scale_y_continuous(limits = c(1, 5), labels = c("Very  \nunlikely","Unlikely ","Neutral ","Likely ","Very \nLikely")) +
scale_x_discrete() +
ylab(label="Answer") +
xlab(label = "Permission system") +
theme_classic() +
theme(text = element_text(size=15))
############################################ Q1 E Q2 SENZA GGPLOT ###############################################
df <- data.frame(as.numeric(A6$Q1), as.numeric(AFP$Q1), as.numeric(A6$Q2), as.numeric(AFP$Q2))
colnames(df) <- c("Android 6", "AFP", "Android 6", "AFP")
boxplot(df,  yaxt='n', col="grey", drawRect=TRUE, wex=0.5, range=1, xaxt="n")
abline(v=2.5)
par(las=1, pin=c(5,3.5), mar=c(2,5.6,2.5,5.6))
axis(side=2, labels=c("Absolutely \nnot trustable", "Not \ntrustable", "Neutral", "Trustable", "Absolutely \ntrustable "), at=seq(1,5))
axis(side=4, labels=c("Very  \nunlikely","Unlikely ","Neutral ","Likely ","Very \nLikely"), at=seq(1,5))
axis(side=3, labels=c("Android 6", "AFP", "Android 6", "AFP"), at=seq(1,4))
axis(side=1, labels=c(expression('Q'[1]), expression('Q'[2])), at=c(1.5,3.5))
################################################ HISTOGRAM OF Q3 ################################################
df <- data.frame(as.numeric(AFP$Q3))
colnames(df) <- c("value")
ggplot(df, aes(x=value)) +
stat_bin(binwidth = 1, bins = 5) +
scale_x_continuous(labels = c("Absolutely \nno","No ","Don't know","Yes","Absolutely \nyes")) +
coord_cartesian(xlim  = c(1, 5)) +
ylab(label="Count") +
xlab(label = "Answer") +
theme_classic() +
theme(text = element_text(size=15))
################################################ HISTOGRAM OF Q4 ################################################
df <- data.frame(as.numeric(AFP$Q4))
colnames(df) <- c("value")
ggplot(df, aes(x=value)) +
stat_bin(binwidth = 1, bins = 5) +
scale_x_continuous(labels = c("Absolutely \nno","No ","Don't know","Yes","Absolutely \nyes")) +
coord_cartesian(xlim  = c(1, 5)) +
ylab(label="Count") +
xlab(label = "Answer") +
theme_classic() +
theme(text = element_text(size=15))
################################################ HISTOGRAM OF Q5 ################################################
df <- data.frame(as.numeric(AFP$Q5))
colnames(df) <- c("value")
ggplot(df, aes(x=value)) +
stat_bin(binwidth = 1, bins = 5) +
scale_x_continuous(labels = c("Absolutely \nno","No ","Don't know","Yes","Absolutely \nyes")) +
coord_cartesian(xlim  = c(1, 5)) +
ylab(label="Count") +
xlab(label = "Answer") +
theme_classic() +
theme(text = element_text(size=15))
################################################ HISTOGRAM OF Q6 ################################################
df <- data.frame(as.numeric(AFP$Q6))
colnames(df) <- c("value")
ggplot(df, aes(x=value)) +
stat_bin(binwidth = 1, bins = 5) +
scale_x_continuous(labels = c("Absolutely \nno","No ","Don't know","Yes","Absolutely \nyes")) +
coord_cartesian(xlim  = c(1, 5)) +
ylab(label="Count") +
xlab(label = "Answer") +
theme_classic() +
theme(text = element_text(size=15))
################################################ BOXPLOT OF Q3 TO Q6 ################################################
df <- data.frame(as.numeric(AFP$Q3), as.numeric(AFP$Q4), as.numeric(AFP$Q5), as.numeric(AFP$Q6))
colnames(df) <- c("Q3", "Q4", "Q5", "Q6")
boxplot(df,  yaxt='n', col="grey", drawRect=TRUE, wex=0.5, range=1, ylim=c(1,5), xaxt="n")
abline(v=c(1.5, 2.5, 3.5))
par(las=1, pin=c(5,3.5), mar=c(2,5.6,0.5,2))
axis(side=2, labels=c("Absolutely \nno","No ","Don't know","Yes","Absolutely \nyes"), at=seq(1,5))
axis(side=1, labels=c(expression('Q'[3]), expression('Q'[4]), expression('Q'[5]), expression('Q'[6])), at=c(1,2,3,4))
################################################ HEATMAP OF POSITIVE STATEMENTS  ############################################
positive_statements <- rbind(AFP_freq_s1, AFP_freq_s3, AFP_freq_s5, AFP_freq_s7, AFP_freq_s9)
positive_statements <- melt(t(positive_statements) * 100)
colnames(positive_statements) = c('Score', 'rowID', 'Percentage')
hm.palette <- colorRampPalette(brewer.pal(9, 'Oranges'), space='Lab')
addline_format <- function(x,...){
gsub('\\s','\n',x)
}
ggplot(positive_statements, aes(x = Score, y = rowID, fill = Percentage)) +
geom_tile() +
#coord_equal() +
scale_fill_gradientn(colours = hm.palette(100)) +
scale_y_discrete("Statement", labels = c("S1","S3","S5","S7","S9")) +
scale_x_discrete(labels = addline_format(c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree"))) +
xlab("Score") +
theme(axis.text=element_text(size=12), axis.title=element_text(size=12)) +
theme(axis.text.x = element_text(angle = 70, hjust = 1, colour = c('red1', 'red4', 'black', 'green4', 'green2')))
################################################ HEATMAP OF NEGATIVE STATEMENTS  ############################################
negative_statements <- rbind(AFP_freq_s2, AFP_freq_s4, AFP_freq_s6, AFP_freq_s8, AFP_freq_s10)
negative_statements <- melt(t(negative_statements) * 100)
colnames(negative_statements) = c('Score', 'rowID', 'Percentage')
hm.palette <- colorRampPalette(brewer.pal(9, 'Oranges'), space='Lab')
ggplot(negative_statements, aes(x = Score, y = rowID, fill = Percentage)) +
geom_tile() +
#coord_equal() +
scale_fill_gradientn(colours = hm.palette(100)) +
scale_y_discrete("Statement", labels = c("S2","S4","S6","S8","S10")) +
scale_x_discrete(labels = addline_format(c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree"))) +
xlab("Score") +
theme(axis.text=element_text(size=12), axis.title=element_text(size=12)) +
theme(axis.text.x = element_text(angle = 70, hjust = 1,
colour = c('red1', 'red4', 'black', 'green4', 'green2')))
################################## COMPLETE NORMALIZED STATEMENTS HEATMAP  ############################################
norm_statements = rbind(S1n_freq, S2n_freq, S3n_freq, S4n_freq, S5n_freq, S6n_freq, S7n_freq, S8n_freq, S9n_freq,
S10n_freq)
norm_statements <- melt(norm_statements )
colnames(norm_statements) = c('Score', 'rowID', 'Percentage')
hm.palette <- colorRampPalette(brewer.pal(9, 'Oranges'), space='Lab')
ggplot(norm_statements, aes(x = Score, y = rowID, fill = Percentage)) +
geom_tile() +
#coord_equal() +
scale_fill_gradientn(colours = hm.palette(100)) +
scale_y_continuous() +
scale_x_discrete(labels = c(expression('S'[1]),expression('S'[2]),expression('S'[3]),expression('S'[4]),
expression('S'[5]),expression('S'[6]),expression('S'[7]),expression('S'[8]),
expression('S'[9]),expression('S'[10]))) +
xlab("Statement") +
ylab("Score") +
theme(axis.text=element_text(size=14), axis.title=element_text(size=14)) +
theme(axis.text.y = element_text(colour = c('red1', 'red4', 'black', 'green4', 'green2'))) +
theme(legend.position="bottom")
############################# WILCOX Q1 Q2 #######################################
wilcox.test(as.numeric(AFP$Q1), as.numeric(A6$Q1), alternative = 'two.sided')
wilcox.test(as.numeric(AFP$Q2), as.numeric(A6$Q2), alternative = 'two.sided')
S1n_freq
S2n_freq
S3n_freq
S5n_freq
S4n_freq
S9n_freq
S8n_freq
S7n_freq
S6n_freq
